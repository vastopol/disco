disasm notes

----------------------------------------

working test cases
- binary files
- assembly files

The mcgraw hill source comes with some tests.
They provide a set of binary, assembly, and c programs.
However, only some of the files will assemble correctly.

when use lc3convert on a .bin or .hex file it will produce single .obj file
when use lc3as on a .asm file it will produce 2 files a .obj file and a .sym file for the symbol table
lc3as can only take 1 file at a time and it produces a single object file with its corresponding symbol table

so far the c compiler is not working correctly (FIXME)

----------------------------------------

illegal instruction op = 1101
JSR and JSRR both have op = 0100
JMP and RET  both have op = 1100, RET is actually JMP R7

Trap x20 GETC
Trap x21 OUT
Trap x22 PUTS
Trap x23 IN
Trap X24 PUTSP
Trap x25 HALT

LD, LDI, LEA, ST, STI have same decoding scheme if don't care about src/dst specifics related to 1st register
shouldn't matter since there is only 1 register and the rest is pcoffset9

LDR, STR have same decoding scheme if don't care about src/dst specifics

JSR/JSRR needs special logic inside to determine which one based on a flag bit

AND, ADD have the same decoding scheme, but also needs special logic inside to determine which one based on a flag bit

also need to be careful since i think the binary isn't 1 to 1 with the assembly,
the order of operands for the syntax can be different than the order in the bitstring.
should only apply to some of the operations that have multiple operands

the whole newline vs carriage return is relevant. must pick only one.
diff of file with LF vs CRLF will be off even if every other character is the same.
this should use LF as the choice.

might need to trim the hex outputs
since lc3 expects x25 not 0x25
change  str(hex(int(offset,2))) -> format(int(offset,2)"X")
so it wont prepend a 0 before x

possible things to do with disassembler:

should output the markers
.orig xHEX
.end

should label trap calls with comments
TRAP x25 ; HALT

should look for returns and comment them
JMP R7 ; RET

----------------------------------------

disassembler:

the disassembler does not work on object files, the "binaries" contain ascii 1's and 0's
first the object file is converted from raw binary form to an ascii representation.
then the preliminary work is to disassemble the the program off of the encoding scheme.

lc-3 assembly is a flat mapping the .obj files and .hex files and .bin files will be the same.
open a .obj file in hexedit and it will show the same byte values as in the .hex files

strategy:

if the final file is in complete ascii form then it should just be a matter of taking in the files,
then line by line breaking the strings up into 2 chunks, and inspecting the opcode,
after that then specifically breaking down the second chunk by instruction type into the designated fields by the instruction type
possibly if the illegal opcode is encountered throw an exception and move to the next file.

there are multiple assumptions about the way that the instructions are represented.
based on this some heuristics can be used to try and make the disassembly more accurate.
for example:
    - the files contain fixed width 16 bit instructions in ascii in the form of ones and zeros: '1' and '0'
    - there is only one instruction per line
    - the first line of the file is always the .orig address
    - only use traps 20-25
    - etc...

for valid files which can be assembled
the assembly code for lc3 programs are structured as such

.orig <HEX address>
code
.end

typical in each program
    start at x3000 (user code lc3 assembly, but not always true)
    only 1 .end
    only 1 .orig

----------------------------------------

problems:

disco being a linear sweep disassembler suffers from the well known problem of
being unable to distinguish data from code when the two are mixed together

the problem is where the data segments are located

the lc3as assembler seems to be a flat disassemble which directly translates the .asm ascii file
into a byte version of the the hex encoding of the instructions

for a .obj file the first line can be assumed to be the origin address
the origin address is directly translated to hex

data can be
.fill
.blkw
.stringz

the data appears to BR instructions since it looks like most of the first bits on the left are zeros
for a block word it will appear as then binary form of the unsigned 16-bit integer which represents its size

also for compilation looks like some registers have special purposes:
r4 - global data pointer
r5 - frame pointer
r6 - stack pointer

----------------------------------------

how to deal with this...

* knowledge about pseudo ops

.FILL value
allocate one word, initialize with value

.BLKW number
allocate multiple words of storage, value unspecified

.STRINGZ n-character string
allocate n+1 locations, initialize w/characters and null terminator

* Muti-Word Assembler Directives

.BLKW #4

shorthand for:

.FILL x0
.FILL x0
.FILL x0
.FILL x0

.STRINGZ “Hello”

shorthand for:

.FILL x48 ; ‘H’
.FILL x65 ; ‘e’
.FILL x6C ; ‘l’
.FILL x6C ; ‘l’
.FILL x6F ; ‘o’
.FILL x0  ; NULL terminator

* check certain opcodes

if out of reasonable range, treat it as an .FILL address

PCoffset9

BR

LD, ST. LDI, STI, LEA

JSR

TRAP

could assume

 Restriction:
 simple disassembler can only handle the LC3 assembly language which
 put ".FILL" in the bottom of the code and without .BLKW or .STRINGZ

